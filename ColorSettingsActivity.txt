package com.example.pruebas

import android.content.Context
import android.os.Bundle
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController

@Composable
fun ColorSettingsScreen(navController: NavController) {
    val context = LocalContext.current
    val prefs = context.getSharedPreferences("AppPrefs", Context.MODE_PRIVATE)

    var bgRed by remember { mutableStateOf(prefs.getFloat("bg_red", 1f)) }
    var bgGreen by remember { mutableStateOf(prefs.getFloat("bg_green", 1f)) }
    var bgBlue by remember { mutableStateOf(prefs.getFloat("bg_blue", 1f)) }

    var btnRed by remember { mutableStateOf(prefs.getFloat("btn_red", 0.38f)) }
    var btnGreen by remember { mutableStateOf(prefs.getFloat("btn_green", 0.12f)) }
    var btnBlue by remember { mutableStateOf(prefs.getFloat("btn_blue", 0.93f)) }

    var textRed by remember { mutableStateOf(prefs.getFloat("text_red", 0f)) }
    var textGreen by remember { mutableStateOf(prefs.getFloat("text_green", 0f)) }
    var textBlue by remember { mutableStateOf(prefs.getFloat("text_blue", 0f)) }

    val backgroundColor = Color(bgRed, bgGreen, bgBlue)
    val buttonColor = Color(btnRed, btnGreen, btnBlue)
    val textColor = Color(textRed, textGreen, textBlue)

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(backgroundColor)
            .padding(8.dp),
        verticalArrangement = Arrangement.SpaceBetween
    ) {
        Column(modifier = Modifier.weight(1f, false)) {
            Text(
                text = "PersonalizaciÃ³n",
                fontSize = 14.sp,
                color = textColor,
                textAlign = TextAlign.Center,
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 4.dp)
            )

            Text("Color de fondo", fontSize = 10.sp, color = textColor)
            ColorSliders(red = bgRed, green = bgGreen, blue = bgBlue, labelColor = textColor) {
                    r, g, b -> bgRed = r; bgGreen = g; bgBlue = b
            }

            Text("Color de botones", fontSize = 10.sp, color = textColor)
            ColorSliders(red = btnRed, green = btnGreen, blue = btnBlue, labelColor = textColor) {
                    r, g, b -> btnRed = r; btnGreen = g; btnBlue = b
            }

            Text("Color del texto", fontSize = 10.sp, color = textColor)
            ColorSliders(red = textRed, green = textGreen, blue = textBlue, labelColor = textColor) {
                    r, g, b -> textRed = r; textGreen = g; textBlue = b
            }
        }

        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(top = 4.dp),
            horizontalArrangement = Arrangement.SpaceEvenly,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Button(
                onClick = {
                    with(prefs.edit()) {
                        putFloat("bg_red", bgRed)
                        putFloat("bg_green", bgGreen)
                        putFloat("bg_blue", bgBlue)
                        putFloat("btn_red", btnRed)
                        putFloat("btn_green", btnGreen)
                        putFloat("btn_blue", btnBlue)
                        putFloat("text_red", textRed)
                        putFloat("text_green", textGreen)
                        putFloat("text_blue", textBlue)
                        apply()
                    }
                    Toast.makeText(context, "Colores guardados", Toast.LENGTH_SHORT).show()
                    navController.popBackStack()
                },
                colors = ButtonDefaults.buttonColors(
                    containerColor = buttonColor,
                    contentColor = textColor
                ),
                modifier = Modifier.padding(horizontal = 2.dp),
                contentPadding = PaddingValues(4.dp)
            ) {
                Text("Guardar", fontSize = 10.sp)
            }

            Button(
                onClick = {
                    bgRed = 1f; bgGreen = 1f; bgBlue = 1f
                    btnRed = 0.38f; btnGreen = 0.12f; btnBlue = 0.93f
                    textRed = 0f; textGreen = 0f; textBlue = 0f
                },
                colors = ButtonDefaults.buttonColors(
                    containerColor = buttonColor,
                    contentColor = textColor
                ),
                modifier = Modifier.padding(horizontal = 2.dp),
                contentPadding = PaddingValues(4.dp)
            ) {
                Text("Reestablecer", fontSize = 10.sp)
            }
        }
    }
}

@Composable
fun ColorSliders(
    red: Float,
    green: Float,
    blue: Float,
    labelColor: Color,
    onColorChange: (Float, Float, Float) -> Unit
) {
    Column(modifier = Modifier.padding(vertical = 2.dp)) {
        Text("Rojo: ${"%.2f".format(red)}", fontSize = 9.sp, color = labelColor)
        Slider(
            value = red,
            onValueChange = { onColorChange(it, green, blue) },
            modifier = Modifier.height(24.dp)
        )

        Text("Verde: ${"%.2f".format(green)}", fontSize = 9.sp, color = labelColor)
        Slider(
            value = green,
            onValueChange = { onColorChange(red, it, blue) },
            modifier = Modifier.height(24.dp)
        )

        Text("Azul: ${"%.2f".format(blue)}", fontSize = 9.sp, color = labelColor)
        Slider(
            value = blue,
            onValueChange = { onColorChange(red, green, it) },
            modifier = Modifier.height(24.dp)
        )
    }
}