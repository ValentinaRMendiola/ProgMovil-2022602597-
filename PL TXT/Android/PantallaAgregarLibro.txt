package com.example.proyectolibros

import android.util.Log
import androidx.activity.compose.BackHandler
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import org.json.JSONObject
import java.net.HttpURLConnection
import java.net.URL

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun LibroForm(modifier: Modifier = Modifier, onVolver: () -> Unit = {}) {
    var titulo by remember { mutableStateOf("") }
    var autor by remember { mutableStateOf("") }
    var descripcion by remember { mutableStateOf("") }
    var fechaPublicacion by remember { mutableStateOf("") }
    var urlImagen by remember { mutableStateOf("") }
    var urlPdf by remember { mutableStateOf("") }
    var genero by remember { mutableStateOf("") }
    var isLoading by remember { mutableStateOf(false) }
    var mensajeRespuesta by remember { mutableStateOf<String?>(null) }

    val snackbarHostState = remember { SnackbarHostState() }

    LaunchedEffect(mensajeRespuesta) {
        mensajeRespuesta?.let {
            snackbarHostState.showSnackbar(it)
            mensajeRespuesta = null
        }
    }

    // Manejo del botón "Atrás" del sistema
    BackHandler {
        onVolver()
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = {
                    Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.Center) {
                        Text("Agregar Libro")
                    }
                }
            )
        },
        snackbarHost = { SnackbarHost(snackbarHostState) },
        modifier = modifier
    ) { padding ->
        Column(
            modifier = Modifier
                .padding(padding)
                .padding(16.dp)
                .fillMaxSize()
                .verticalScroll(rememberScrollState()),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            OutlinedTextField(
                value = titulo,
                onValueChange = { titulo = it },
                label = { Text("Título") },
                modifier = Modifier.fillMaxWidth()
            )
            OutlinedTextField(
                value = autor,
                onValueChange = { autor = it },
                label = { Text("Autor") },
                modifier = Modifier.fillMaxWidth()
            )
            OutlinedTextField(
                value = descripcion,
                onValueChange = { descripcion = it },
                label = { Text("Descripción") },
                modifier = Modifier.fillMaxWidth()
            )
            OutlinedTextField(
                value = fechaPublicacion,
                onValueChange = { fechaPublicacion = it },
                label = { Text("Fecha publicación (YYYY-MM-DD)") },
                modifier = Modifier.fillMaxWidth()
            )
            OutlinedTextField(
                value = urlImagen,
                onValueChange = { urlImagen = it },
                label = { Text("URL Imagen") },
                modifier = Modifier.fillMaxWidth()
            )
            OutlinedTextField(
                value = urlPdf,
                onValueChange = { urlPdf = it },
                label = { Text("URL PDF") },
                modifier = Modifier.fillMaxWidth()
            )
            OutlinedTextField(
                value = genero,
                onValueChange = { genero = it },
                label = { Text("Género") },
                modifier = Modifier.fillMaxWidth()
            )

            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                Button(
                    onClick = { onVolver() },
                    modifier = Modifier.weight(1f)
                ) {
                    Text("Volver")
                }

                Button(
                    onClick = {
                        if (titulo.isBlank() || autor.isBlank() || fechaPublicacion.isBlank() || genero.isBlank()) {
                            mensajeRespuesta = "Por favor, completa todos los campos."
                            return@Button
                        }

                        isLoading = true
                        CoroutineScope(Dispatchers.IO).launch {
                            val response = enviarLibro(
                                titulo,
                                autor,
                                descripcion,
                                fechaPublicacion,
                                urlImagen,
                                urlPdf,
                                genero
                            )
                            withContext(Dispatchers.Main) {
                                mensajeRespuesta = response
                                isLoading = false

                                if (response.contains("correctamente", ignoreCase = true)) {
                                    onVolver()  // Volver a pantalla principal si fue exitoso
                                }
                            }
                        }
                    },
                    modifier = Modifier.weight(1f),
                    enabled = !isLoading
                ) {
                    Text(if (isLoading) "Guardando..." else "Guardar libro")
                }
            }
        }
    }
}

fun enviarLibro(
    titulo: String,
    autor: String,
    descripcion: String,
    fechaPublicacion: String,
    urlImagen: String,
    urlPdf: String,
    genero: String
): String {
    val url = URL("${Constantes.BASE_URL}/guardar_libro.php")
    val json = JSONObject().apply {
        put("id", java.util.UUID.randomUUID().toString().replace("-", ""))
        put("titulo", titulo)
        put("autor", autor)
        put("descripcion", descripcion)
        put("fecha_publicacion", fechaPublicacion)
        put("fecha_modificacion", "$fechaPublicacion 00:00:00")
        put("eliminado", 0)
        put("url_imagen", urlImagen)
        put("url_pdf", urlPdf)
        put("genero", genero)
    }

    return try {
        val conn = url.openConnection() as HttpURLConnection
        conn.requestMethod = "POST"
        conn.setRequestProperty("Content-Type", "application/json; charset=UTF-8")
        conn.setRequestProperty("Accept", "application/json")
        conn.doOutput = true

        val outputBytes = json.toString().toByteArray(Charsets.UTF_8)
        conn.outputStream.use { it.write(outputBytes) }

        val responseCode = conn.responseCode
        Log.d("HTTP", "Response code: $responseCode")

        val stream = if (responseCode in 200..299) conn.inputStream else conn.errorStream

        val responseText = stream.bufferedReader().use { it.readText() }
        val jsonResponse = JSONObject(responseText)

        when {
            jsonResponse.has("status") && jsonResponse.getString("status") == "success" -> {
                "Libro guardado correctamente"
            }
            jsonResponse.has("message") -> {
                "${jsonResponse.getString("message")}"
            }
            else -> {
                "Error HTTP: $responseCode"
            }
        }
    } catch (e: Exception) {
        "${e.message}"
    }
}
