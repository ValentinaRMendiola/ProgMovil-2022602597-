package com.example.pruebas

import android.app.Activity
import android.graphics.Bitmap
import android.net.Uri
import android.provider.MediaStore
import android.util.Base64
import android.widget.Toast
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.activity.result.launch
import androidx.compose.foundation.Image
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.text.BasicTextField
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.TextFieldValue
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import java.io.ByteArrayOutputStream

@Composable
fun PantallaAgregar(navController: NavController, dbHelper: DBHelper) {
    val context = LocalContext.current
    val activity = context as Activity

    var nombre by remember { mutableStateOf(TextFieldValue()) }
    var precio by remember { mutableStateOf(TextFieldValue()) }
    var descripcion by remember { mutableStateOf(TextFieldValue()) }
    var imageBitmap by remember { mutableStateOf<Bitmap?>(null) }
    var base64Image by remember { mutableStateOf<String?>(null) }

    val galleryLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.GetContent(),
        onResult = { uri: Uri? ->
            uri?.let {
                val bitmap = MediaStore.Images.Media.getBitmap(activity.contentResolver, uri)
                imageBitmap = bitmap
                base64Image = encodeImageToBase64(bitmap)
            }
        }
    )

    val cameraLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.TakePicturePreview(),
        onResult = { bitmap: Bitmap? ->
            bitmap?.let {
                imageBitmap = it
                base64Image = encodeImageToBase64(it)
            }
        }
    )

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            "Agregar Nuevo Producto",
            fontSize = 22.sp,
            modifier = Modifier.padding(bottom = 8.dp)
        )

        Spacer(modifier = Modifier.height(8.dp))

        Text("Nombre")
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .padding(8.dp)
                .border(1.dp, MaterialTheme.colorScheme.primary, shape = MaterialTheme.shapes.small)
        ) {
            BasicTextField(
                value = nombre,
                onValueChange = { nombre = it },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(8.dp),
                keyboardOptions = KeyboardOptions.Default.copy(keyboardType = KeyboardType.Text)
            )
        }

        Spacer(modifier = Modifier.height(8.dp))

        Text("Precio")
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .padding(8.dp)
                .border(1.dp, MaterialTheme.colorScheme.primary, shape = MaterialTheme.shapes.small)
        ) {
            BasicTextField(
                value = precio,
                onValueChange = { precio = it },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(8.dp),
                keyboardOptions = KeyboardOptions.Default.copy(keyboardType = KeyboardType.Number)
            )
        }

        Spacer(modifier = Modifier.height(8.dp))

        Text("Descripción")
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .padding(8.dp)
                .border(1.dp, MaterialTheme.colorScheme.primary, shape = MaterialTheme.shapes.small)
        ) {
            BasicTextField(
                value = descripcion,
                onValueChange = { descripcion = it },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(8.dp),
                keyboardOptions = KeyboardOptions.Default.copy(keyboardType = KeyboardType.Text)
            )
        }

        Spacer(modifier = Modifier.height(16.dp))

        Row(
            horizontalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            Button(
                onClick = { galleryLauncher.launch("image/*") },
                modifier = Modifier.sizeIn(minWidth = 120.dp, minHeight = 40.dp)
            ) {
                Text("Seleccionar Imagen", fontSize = 12.sp)
            }

            Button(
                onClick = { cameraLauncher.launch() },
                modifier = Modifier.sizeIn(minWidth = 120.dp, minHeight = 40.dp)
            ) {
                Text("Tomar Foto", fontSize = 12.sp)
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        imageBitmap?.let {
            Image(
                bitmap = it.asImageBitmap(),
                contentDescription = null,
                modifier = Modifier
                    .size(100.dp)
                    .padding(bottom = 16.dp)
            )
        }

        if (imageBitmap != null) {
            Button(
                onClick = {
                    imageBitmap = null
                    base64Image = null
                },
                modifier = Modifier.sizeIn(minWidth = 120.dp, minHeight = 40.dp)
            ) {
                Text("Eliminar Imagen", fontSize = 12.sp)
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        Button(
            onClick = {
                val nombreProducto = nombre.text
                val precioProducto = precio.text.toDoubleOrNull()
                val descripcionProducto = descripcion.text


                when {
                    nombreProducto.isEmpty() -> {
                        Toast.makeText(context, "El nombre del producto no puede estar vacío", Toast.LENGTH_SHORT).show()
                    }
                    precioProducto == null || precioProducto <= 0 -> {
                        Toast.makeText(context, "El precio debe ser un valor positivo y mayor a cero", Toast.LENGTH_SHORT).show()
                    }
                    descripcionProducto.isEmpty() -> {
                        Toast.makeText(context, "La descripción del producto no puede estar vacía", Toast.LENGTH_SHORT).show()
                    }
                    base64Image == null -> {
                        Toast.makeText(context, "Debe seleccionar o capturar una imagen del producto", Toast.LENGTH_SHORT).show()
                    }
                    else -> {

                        dbHelper.insertProductoDesdeUI(nombreProducto, precioProducto, descripcionProducto, base64Image)
                        Toast.makeText(context, "Producto agregado exitosamente", Toast.LENGTH_SHORT).show()
                        navController.popBackStack()
                    }
                }
            },
            modifier = Modifier.sizeIn(minWidth = 120.dp, minHeight = 40.dp)
        ) {
            Text("Guardar Producto", fontSize = 12.sp)
        }
    }
}

fun encodeImageToBase64(image: Bitmap): String {
    val byteArrayOutputStream = ByteArrayOutputStream()
    image.compress(Bitmap.CompressFormat.JPEG, 100, byteArrayOutputStream)
    val byteArray = byteArrayOutputStream.toByteArray()
    return Base64.encodeToString(byteArray, Base64.DEFAULT)
}