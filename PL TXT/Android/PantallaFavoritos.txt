package com.example.proyectolibros

import android.content.Context
import android.content.Intent
import android.net.Uri
import androidx.activity.compose.BackHandler
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.Favorite
import androidx.compose.material.icons.outlined.FavoriteBorder
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import coil.compose.AsyncImage

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun PantallaFavoritos(
    todosLosLibros: List<Libro>,
    baseUrl: String,
    onVolver: () -> Unit
) {
    val context = LocalContext.current

    // Estado reactivo para favoritos
    var favoritosIds by remember { mutableStateOf(obtenerFavoritos(context).toMutableSet()) }

    // Libros filtrados favoritos
    val librosFavoritos = remember(favoritosIds, todosLosLibros) {
        todosLosLibros.filter { favoritosIds.contains(it.Id.toString()) }
    }

    // Manejo del botón "Atrás" del sistema
    BackHandler {
        onVolver()
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = {
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.Center,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(text = "Favoritos")
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(text = "\u2764\uFE0F") // Icono corazón
                    }
                },
                navigationIcon = {
                    IconButton(onClick = onVolver) {
                        Icon(Icons.Filled.ArrowBack, contentDescription = "Volver")
                    }
                }
            )
        }
    ) { padding ->
        if (librosFavoritos.isEmpty()) {
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(padding),
                contentAlignment = androidx.compose.ui.Alignment.Center
            ) {
                Text("No tienes libros favoritos aún.", style = MaterialTheme.typography.bodyLarge)
            }
        } else {
            LazyColumn(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(padding)
            ) {
                items(librosFavoritos) { libro ->
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(8.dp),
                        elevation = CardDefaults.cardElevation(4.dp)
                    ) {
                        Column(modifier = Modifier.padding(12.dp)) {
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.SpaceBetween
                            ) {
                                Text(libro.Titulo, style = MaterialTheme.typography.titleLarge)
                                IconButton(
                                    onClick = {
                                        alternarFavorito(context, libro.Id.toString())
                                        favoritosIds = obtenerFavoritos(context).toMutableSet()
                                    }
                                ) {
                                    if (favoritosIds.contains(libro.Id.toString())) {
                                        Icon(Icons.Filled.Favorite, contentDescription = "Favorito", tint = MaterialTheme.colorScheme.primary)
                                    } else {
                                        Icon(Icons.Outlined.FavoriteBorder, contentDescription = "No favorito")
                                    }
                                }
                            }
                            Text("Autor: ${libro.Autor}", style = MaterialTheme.typography.bodyMedium)
                            Text("Género: ${libro.Genero ?: "Desconocido"}", style = MaterialTheme.typography.bodyMedium)

                            libro.Descripcion?.let {
                                Text(it, style = MaterialTheme.typography.bodySmall, modifier = Modifier.padding(top = 6.dp))
                            }

                            libro.Fecha_publicacion?.let {
                                Text("Fecha: $it", style = MaterialTheme.typography.bodySmall, modifier = Modifier.padding(top = 4.dp))
                            }

                            val urlImagen = libro.UrlImagen?.takeIf { it.isNotBlank() }?.let { ruta ->
                                when {
                                    ruta.startsWith("http://") || ruta.startsWith("https://") -> ruta
                                    ruta.startsWith("/") -> "$baseUrl$ruta"
                                    else -> "$baseUrl/$ruta"
                                }
                            }

                            urlImagen?.let { url ->
                                AsyncImage(
                                    model = url,
                                    contentDescription = "Imagen del libro",
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .height(200.dp)
                                        .padding(top = 8.dp)
                                )
                            }

                            val urlPdf = libro.UrlPdf?.takeIf { it.isNotBlank() }?.let { rutaPdf ->
                                when {
                                    rutaPdf.startsWith("http://") || rutaPdf.startsWith("https://") -> rutaPdf
                                    rutaPdf.startsWith("/") -> "$baseUrl$rutaPdf"
                                    else -> "$baseUrl/$rutaPdf"
                                }
                            }

                            urlPdf?.let { rutaPdf ->
                                Button(
                                    onClick = {
                                        val intent = Intent(Intent.ACTION_VIEW, Uri.parse(rutaPdf))
                                        context.startActivity(intent)
                                    },
                                    modifier = Modifier.padding(top = 8.dp)
                                ) {
                                    Text("Abrir PDF")
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

// Funciones para favoritos

private const val PREFS_NAME = "favoritos_prefs"
private const val KEY_FAVORITOS = "libros_favoritos"

fun obtenerFavoritos(context: Context): MutableSet<String> {
    val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)
    return prefs.getStringSet(KEY_FAVORITOS, emptySet())?.toMutableSet() ?: mutableSetOf()
}

fun alternarFavorito(context: Context, libroId: String) {
    val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)
    val favoritos = obtenerFavoritos(context)
    if (favoritos.contains(libroId)) favoritos.remove(libroId) else favoritos.add(libroId)
    prefs.edit().putStringSet(KEY_FAVORITOS, favoritos).apply()
}
